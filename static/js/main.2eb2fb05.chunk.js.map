{"version":3,"sources":["components/Search.jsx","components/button.jsx","components/Table.jsx","constants/index.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","value","onChange","children","onSubmit","type","Button","onClick","className","Table","list","onDismiss","map","item","key","objectID","style","width","href","url","title","author","num_comments","points","PATH_BASE","App","onSearchSubmit","event","searchTerm","state","fetchSearchTopstories","preventDefault","id","updatedHits","result","hits","filter","setState","onSearchChange","target","length","fetchSearchTopStories","error","isLoading","page","oldHits","this","fetch","then","response","json","setSearchTopStories","catch","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2eb2fb05.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Search(props) {\n    const { value, onChange, children,onSubmit } = props;\n    return (\n      <form onSubmit={onSubmit}>\n        {children} <input\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        />\n      </form>\n    );\n  }\n\nexport default Search;","import React from 'react';\n\nfunction Button(props)  {\n    const {\n        onClick,\n        className='',\n        children,\n      } = props;\n      return (\n        <button\n          onClick={onClick}\n          className={className}\n          type=\"button\"\n        >\n          {children}\n        </button>\n      );\n    \n  }\n\nexport default Button;","import React from 'react';\nimport Button from './button';\n\n\nconst isSearched = (searchTerm) => (item) =>\nitem.title.toLowerCase().includes(searchTerm.toLowerCase());\n\nfunction Table (props){\n      const { list, onDismiss } =props;\n      return (\n        <div className=\"table\">\n          {list.map(item =>\n            <div key={item.objectID} className=\"table-row\">\n              <span style={{ width: '40%' }}>\n            <a href={item.url}>{item.title}</a>\n            </span>\n            <span style={{ width: '30%' }}>\n              {item.author}\n            </span>\n            <span style={{ width: '10%' }}>\n            {item.num_comments}\n            </span>\n            <span style={{ width: '10%' }}>\n            {item.points}\n            </span>\n            <span style={{ width: '10%' }}>\n            <Button\n              onClick={() => onDismiss(item.objectID)}\n              className=\"button-inline\"\n            >\n            Dismiss\n            </Button>\n            </span>\n            </div>\n          )}\n        </div>\n      );\n  }\n\nexport default Table; ","export const DEFAULT_QUERY = 'redux';\nexport const DEFAULT_HPP = '100';\nexport const PATH_BASE = 'https://hn.algolia.com/api/v1';\nexport const PATH_SEARCH = '/search';\nexport const PARAM_SEARCH = 'query=';\nexport const PARAM_PAGE = 'page=';\nexport const PARAM_HPP = 'hitsPerPage=';","import React,{Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Search from './components/Search';\nimport Table from './components/Table';\nimport Button from './components/button';\nimport {\n  DEFAULT_QUERY,\n  DEFAULT_HPP,\n  PATH_BASE,\n  PATH_SEARCH,\n  PARAM_SEARCH,\n  PARAM_PAGE,\n  PARAM_HPP,\n} from './constants/index'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchTerm: DEFAULT_QUERY,\n      result :null,\n      error:null,\n      isLoading: false\n    };\n\n  }\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n\n    const oldHits = page !== 0\n      ? this.state.result.hits\n      : [];\n  \n    const updatedHits = [\n      ...oldHits,\n      ...hits\n    ];\n  \n    this.setState({\n      result: { hits: updatedHits, page },\n      isLoading: false\n    });\n  }\n  \n  onSearchSubmit= (event)=> {\n    const { searchTerm } = this.state;\n    this.fetchSearchTopstories(searchTerm);\n     event.preventDefault();\n  }\n\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    this.setState({ isLoading: true });\n\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(response => response.json())\n      .then(result => this.setSearchTopStories(result))\n      .catch(error => this.setState({error}) );\n\n  }\n  onDismiss =(id)=>{\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = this.state.result.hits.filter(isNotId);\n    this.setState({ result: { ...this.state.result, hits: updatedHits } });\n  }\n\n  onSearchChange=(event)=>{\n    this.setState({ searchTerm: event.target.value });\n    if(event.target.value.length ===0 ){\n      this.setState({result : null})\n      return\n    }\n    this.fetchSearchTopStories(this.state.searchTerm);\n  }\n\n  render(){\n    const { searchTerm, result,error,isLoading } = this.state;\n    const page = (result && result.page) || 0;\n    // if (!result) { return null; }\n    // if (error) {\n    //   return <p>Something went wrong.</p>;\n    // }\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n         <Search\n          value={searchTerm}\n          onChange={this.onSearchChange}\n          onSubmit={this.onSearchSubmit}\n        >\n          Search\n        </Search>\n        </div>\n        {result && \n          <Table\n          list={result.hits}\n           onDismiss={this.onDismiss}\n         />\n        }\n        <div className=\"interactions\">\n          <Button onClick={() => this.fetchSearchTopStories(searchTerm, page + 1)}>\n            More\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}